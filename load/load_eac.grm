// groovy / gremlin script to load EAC-CPF relations into a graph database

// set EAC_DIR XTF_BASE_URL GRAPH_DB GRAPH_ML

def env = System.getenv()

// directory to troll
def data_root = env['EAC_DIR'] ?: "./data"

// paths for output files can be set with environmental variables, or use these defaults
def database_path = env['GRAPH_DB'] ?: "./neo4j-db"
def graphML_file = env['GRAPH_ML'] ?: "./graphML.xml"
def gml_file = env['GRAPH_GML'] ?: "./graph.gml"
def GraphSON_file = env['GRAPH_JSON'] ?: "./GraphSON.json"

// does the input even exist ?
def dir = new File(data_root)
if (!(dir.exists()) ){ println data_root + " not found"; System.exit(1) }

// create graph
def g = new Neo4jGraph(database_path)

// we'll need this index later; autoindex incantation
g.createKeyIndex("identity", Vertex.class)

// created manual index for "related items" api
sourceEADurlIndex = g.createIndex('sourceEADurlIndex', Vertex.class)

// created manual index for "related items" api
recordIdIndex = g.createIndex('recordId', Vertex.class)

// first loop; define vertex for each name / EAC file
dir.eachFile{file->
  def eac = new XmlSlurper().parse(file).declareNamespace(xlink: 'http://www.w3.org/1999/xlink')
  // xpath: /eac-cpf/cpfDescription/identity[1]/nameEntry/part
  def fromName = eac.cpfDescription.identity[0].nameEntry[0].part
  def entityType = eac.cpfDescription.identity[0].entityType
  // eac.cpfDescription.control.sources.source now has VIAF and worldcat links
    
  // def existDates = eac.cpfDescription.description[0].existDates
  def creatorOf = ''
  def referencedIn = ''
  def sameAs = ''
  def recordId = eac.control.recordId[0].text()
  def otherRecordId = eac.control.otherRecordId.findAll{ it.@localType="mergedCPF" }
  eac.cpfDescription.relations."*".findAll { it."@xlink:href" != '' }.each {  
    if (it."@xlink:arcrole".toString().contains("creatorOf")) {
      creatorOf = creatorOf + it."@xlink:href" + "\n"
    }
    if (it."@xlink:arcrole".toString().contains("referencedIn")) {
      referencedIn = referencedIn + it."@xlink:href" + "\n"
    }
    if (it."@xlink:arcrole".toString().contains("sameAs")) {
      sameAs = sameAs + it."@xlink:href" + "\n"
    }
  }
  Vertex vertex = g.addVertex(null)
  vertex["filename"] = file.getName()
  vertex["identity"] = fromName as String
  vertex["entityType"] = entityType as String
  // there has got to be a better way?
  // if (existDates != '') { vertex["existDates"] = existDates as String }
  if (creatorOf != '')     { 
    vertex["creatorOf"]  = creatorOf.tokenize("\n") 
    creatorOf.tokenize("\n").each {
      sourceEADurlIndex.put("creatorOf", it, vertex)
    }
  }
  if (referencedIn != '')  { 
    vertex["referencedIn"]  = referencedIn.tokenize("\n") 
    referencedIn.tokenize("\n").each {
      sourceEADurlIndex.put("referencedIn", it, vertex)
    }
  }
  if (recordId != '')      { 
    vertex["recordId"] = recordId
    recordIdIndex.put("recordId", recordId, vertex) 
  }
  if (otherRecordId != '') {
    otherRecordId.each {
    // vertex["otherRecordId"] = otherRecordId
      recordIdIndex.put("recordId", it.text(), vertex) 
    }
  }
  if (sameAs != '') {
    vertex["sameAs"]  = sameAs.tokenize("\n") 
  }
  print vertex["identity"]
  println vertex

}

// second loop; create the edges
dir.eachFile{file->

  // first, get the vertex for this file
  def eac = new XmlSlurper().parse(file).declareNamespace(xlink: 'http://www.w3.org/1999/xlink')
  def from_name = eac.cpfDescription.identity[0].nameEntry[0].part
  def from_node = g.V("identity", from_name as String).next()
  def from_file = from_node.filename

  // now, process all related names
  eac.cpfDescription.relations.cpfRelation.each {

    def recordId = it."@xlink:href"

    // get the vertex to connect to using recordId index
    def to_node, to_file, to_name
    def to_node_iterator = recordIdIndex.get("recordId", recordId).iterator()
    if ( to_node_iterator ) { 
      to_node = to_node_iterator.next()
      to_file = to_node.filename
      to_name = to_node.identity
    }

    // we'll need to know the edge type 
    def arcrole = it."@xlink:arcrole"

    // we we can create an edge; then do so
    if ( from_node && to_node && arcrole && (from_node != to_node) ) {
      def e = g.addEdge(null, from_node, to_node, arcrole as String)

      // and add some properties to the edge
      e["to_name"] = to_name as String
      e["to_file"] = to_file as String
      e["from_name"] = from_name as String
      e["from_file"] = from_file as String

    // no match found
    } else {
      print "SKIPPED"
      // print "${from_node}|${from_file}|${to_node}|${to_file}|${arcrole}"
      print "${from_node}|${from_file}|||${arcrole}"
    }
    println "\"${from_name}\" ${arcrole} \"${to_name}\"; ${recordId}"
  }
}

println "compute popularity"
// pre compute popularity score
for (z in g.V ) { 
  z.score = z.out.count() 
}

println "output searlized versions"
// output searlized versions
GraphMLWriter.outputGraph(g, new FileOutputStream(graphML_file))
GraphSONWriter.outputGraph(g, new FileOutputStream(gml_file))
GMLWriter.outputGraph(g, new FileOutputStream(GraphSON_file))

// neo4j likes to be shutdown graceful like
g.shutdown()
